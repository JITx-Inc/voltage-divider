#use-added-syntax(jitx,tests)
defpackage voltage-divider/tests/basic:
  import core
  import jitx with :
    prefix(Resistor) => EModel-
    prefix(Capacitor) => EModel-
    prefix(Inductor) => EModel-

  import jitx/commands
  import jitx/parts/query-api
  import jitx/parts/legacy-ocdb-structures

  import jsl/design/settings

  import voltage-divider

public defn expect-throw (f) -> Maybe<String>:
  val res = try :
    val unexpected = f()
    None()
  catch (e:Exception) :
    val msg = to-string("%~" % [e])
    One(msg)
  #EXPECT(res is-not None)
  res

deftest(solver) test-basic-solver:

  OPERATING-TEMPERATURE = min-max(-20.0, 50.0)
  val exp-vout = 2.5 +/- (5 %)
  val cxt = VoltageDividerConstraints(
    v-in = 10.0 +/- (1 %),
    v-out = exp-vout
    current = 50.0e-6,
    ; prec-series = [(2 %), (1 %), (0.5 %)]
    base-query = ResistorQuery(
      mounting = "smd"
      min-stock = 10,
      case = ["0603"]
    )
  )

  val result = solve(cxt)
  ; println("VOUT:   %_" % [vo(result)])
  ; println("R-high: %_" % [resistance $ R-h(result)])
  ; println("R-low:  %_" % [resistance $ R-l(result)])


  #EXPECT( in-range?(exp-vout, vo(result)))

  #EXPECT( in-range?(165.0e3 +/- 10.0e3, resistance $ R-h(result)))
  #EXPECT( in-range?(55.0e3 +/- 10.0e3, resistance $ R-l(result)))


deftest(solver) test-fail-case-1:

  val cxt = VoltageDividerConstraints(
    v-in = 10.0 +/- (1 %),
    v-out = 12.5 +/- (1 %),
    current = 50.0e-6,
    base-query = ResistorQuery(
      mounting = "smd"
      min-stock = 10,
      case = ["0603"]
    )
  )

  val msg = expect-throw({solve(cxt)})
  ; println("MSG: %_" % [msg])
  #EXPECT(index-of-chars(value!(msg), "Incompatible V-in and V-out") is-not False)

deftest(solver) test-fail-case-2:

  val cxt = VoltageDividerConstraints(
    v-in = 10.0 +/- (10 %),
    v-out = 2.5 +/- (0.1 %),
    current = 50.0e-6,
    base-query = ResistorQuery(
      mounting = "smd"
      min-stock = 10,
      case = ["0603"]
    )
  )

  val msg = expect-throw({solve(cxt)})
  ; println("MSG: %_" % [msg])
  #EXPECT(index-of-chars(value!(msg), "V-in Range is too large") is-not False)

deftest(solver) test-fail-case-3:

  val cxt = VoltageDividerConstraints(
    v-in = 10.0 +/- (1 %),
    v-out = 2.5 +/- (5 %),
    current = 50.0e-6,
    prec-series = [(20 %), (10 %), (5 %)]
    base-query = ResistorQuery(
      mounting = "smd"
      min-stock = 10,
      case = ["0603"]
    )
  )

  val msg = expect-throw({solve(cxt)})
  ; println("MSG: %_" % [msg])
  #EXPECT(index-of-chars(value!(msg), "No Precision Series can meet") is-not False)


deftest(solver) test-inverse-divider :

  OPERATING-TEMPERATURE = min-max(-20.0, 50.0)
  val exp-vout = 3.3 +/- (2 %)
  val cxt = InverseDividerConstraints(
    v-in = min-typ-max(0.788, 0.8, 0.812),
    v-out = exp-vout
    current = 50.0e-6,
    base-query = ResistorQuery(
      mounting = "smd"
      min-stock = 10,
      case = ["0402"]
    )
  )

  val result = solve(cxt)
  ; println("VOUT:   %_" % [vo(result)])
  ; println("R-high: %_" % [resistance $ R-h(result)])
  ; println("R-low:  %_" % [resistance $ R-l(result)])


  #EXPECT( in-range?(exp-vout, vo(result)))

  #EXPECT( in-range?(45.0e3 +/- 10.0e3, resistance $ R-h(result)))
  #EXPECT( in-range?(14.0e3 +/- 5.0e3, resistance $ R-l(result)))
