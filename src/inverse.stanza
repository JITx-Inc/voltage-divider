#use-added-syntax(jitx)
defpackage voltage-divider/inverse:
  import core
  import collections
  import jitx
  import jitx/parts/query-api

  import jsl/ensure
  import jsl/design/settings

  import voltage-divider/constraints
  import voltage-divider/utils

doc: \<DOC>
Inverse Voltage Divider Constraints

This type defines the parameters for a voltage divider solver
that attempts solve the inverse relationship that `VoltageDividerConstraints`.

This is typically useful for the feedback voltage divider used in
LDO's or switching converters. For example, an LDO might list specifications
for the reference voltage as a tolerance over a particular temperature range.
Then it is our job, as an engineer, to determine what voltage divider would
cause the output of the LDO to drive a voltage in that range.

This solver allows the user to spec a `v-out` for the LDO's output voltage
as the objective and then the feedback reference as a the input voltage. The
solver will then find the resistor combination with the right precision that
keeps the LDO's output voltage in the objective range.
<DOC>
public defstruct InverseDividerConstraints <: VoltageDividerConstraints:
  doc: \<DOC>
  Input Voltage Range
  The inverse divider's "input" is the middle node of the divider.
  This parameter is used to drive the objective voltage.
  <DOC>
  v-in:Toleranced with:
    as-method => true
  doc: \<DOC>
  Desired Voltage Output Range
  This is the objective voltage for the solver and for the inverse
  solver, this is the `hi` port voltage of the divider.
  <DOC>
  v-out:Toleranced with:
    as-method => true
  doc: \<DOC>
  Max current in amps allowed through the divider (ie from `hi -> lo`)
  This value is expected to be positive.
  <DOC>
  current:Double with:
    ensure => ensure-positive!
    as-method => true

  doc: \<DOC>
  Set of precision series to search
  By default, we search the following series:
    [(20 %), (10 %), (5 %), (2 %), (1 %), (0.5 %), (0.25 %), (0.1 %)]
  The user can customize this series by pass an overriding series.
  <DOC>
  prec-series:Tuple<Percentage> with:
    default => std-precs
    as-method => true

  doc: \<DOC>
  Set the search range for components to select
  This algorithm does a pre-screening of resistor values based on
  the `v-in`, `v-out`, and `current` parameters. Then this
  parameter limits how far from these pre-screen values we're willing
  to search to find an acceptable solution.
  <DOC>
  search-range:Percentage with:
    ensure => ensure-positive!
    default => DEF_SEARCH_RANGE
    as-method => true

  doc: \<DOC>
  Set the minimum number of sources

  When pulling resistors from the database, this algorithm will
  limit the selection of resistors to only those components
  for which there are at least `min-sources` number of manufacturers
  for comparable parts.
  By default this value is 3.
  <DOC>
  min-sources:Int with:
    ensure => ensure-positive!
    default => DEF_MIN_SRCS
    as-method => true

  doc: \<DOC>
  Query Limiter for Results

  For many resistors, there may be 1000's of parts that
  match a particular query. This parameter limits the
  number of returned results to some max so as not to
  overload the parts database. The default value is 50.
  This value must be greater than the `min-sources`
  parameter.
  <DOC>
  query-limit:Int with:
    ensure => ensure-positive!
    default => DEF_QUERY_LIMIT
    as-method => true

  doc: \<DOC>
  Temperature Range for TCR evaluation.
  By default this value will use the `OPERATING-TEMPERATURE`
  specified in the JSL design settings.
  <DOC>
  temp-range:Toleranced with:
    default => OPERATING-TEMPERATURE
    as-method => true

  doc: \<DOC>
  Base ResistorQuery

  This object allows the user to further fine tune the
  selected resistors as part of the solver. The global
  design level defaults will still apply but this can
  be used to override or add to the query parameters.
  Avoid specifying the `resistance`, `tolerance`, or
  `precision` values in this base query builder.
  <DOC>
  base-query:ResistorQuery with:
    default => ResistorQuery()
    as-method => true

with:
  constructor => #InverseDividerConstraints


doc: \<DOC>
Constructor for the Inverse Voltage Divider Constraints

@param v-in Divider's `out` voltage constraints
@param v-out Desired objective voltage at the `hi` node.
@param current Nominal current through the divider in Amps
<DOC>
public defn InverseDividerConstraints (
  --
  v-in:Toleranced,
  v-out:Toleranced,
  current:Double,
  prec-series:Collection<Percentage> = std-precs,
  search-range:Percentage = DEF_SEARCH_RANGE
  min-sources:Int = DEF_MIN_SRCS,
  query-limit:Int = DEF_QUERY_LIMIT
  temp-range:Toleranced = OPERATING-TEMPERATURE
  base-query:ResistorQuery = ResistorQuery()
  ) -> InverseDividerConstraints:

  val series = to-vector<Percentage>(prec-series)
  qsort!(series)
  ; Sort in Descending order
  reverse!(series)

  ensure-sources-limits(min-sources, query-limit)

  #InverseDividerConstraints(
    v-in, v-out, current,
    to-tuple(series), search-range, min-sources, query-limit,
    temp-range, base-query
  )


doc: \<DOC>
Default `compute-objective` for inverse divider.

This function currently computes the objective as the inverse voltage of the
voltage divider. Meaning the middle node of the divider is the "input" and the
objective we are solving over is the voltage into the `hi` port of the divider.

```
Vobj = V-in ( 1 + (R-H / R-L)
```

<DOC>
public defmethod compute-objective (
  cxt:InverseDividerConstraints,
  rh:Toleranced,
  rl:Toleranced,
  hi-dr:Toleranced = tol(1.0)
  lo-dr:Toleranced = tol(1.0),
  ) -> Toleranced:
  val r-hi = rh * hi-dr
  val r-lo = rl * lo-dr

  val vout = v-in(cxt) * (1.0 + (r-hi / r-lo))
  ; println("Computed: r-lo=%_ r-hi=%_ vin=%_ -- vout = %_" % [r-lo, r-hi, v-in(cxt), vout])
  vout


doc: \<DOC>
Compute the Initial Guess for the Inverse Voltage Divider
<DOC>
public defmethod compute-initial-guess (cxt:InverseDividerConstraints) -> [Double, Double]:
  val r-hi = (typ(v-out(cxt)) - typ(v-in(cxt))) / current(cxt)
  val r-lo = typ(v-in(cxt)) / current(cxt)
  [r-hi, r-lo]
