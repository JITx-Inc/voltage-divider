#use-added-syntax(jitx)
defpackage voltage-divider/solver:
  import core
  import collections

  import jitx
  import jitx/commands

  import jitx/parts
  import jsl/ensure
  import jsl/errors

  import voltage-divider/errors
  import voltage-divider/constraints

doc: \<DOC>
Voltage Divider Solution Type
<DOC>
public defstruct VoltageDividerSolution :
  doc: \<DOC>
  High Resistor in the voltage divider circuit configuration
  <DOC>
  R-h: Resistor
  doc: \<DOC>
  Low Resistor in the voltage divider circuit configuration
  <DOC>
  R-l: Resistor
  doc: \<DOC>
  Output Voltage Range
  This voltage is computed over the precision and the variation
  of this resistor in temperature over the operating temperature
  range.
  <DOC>
  vo: Toleranced

doc: \<DOC>
Internal Result Type Primarily to support Sorting
<DOC>
defstruct Ratio :
  doc: \<DOC>
  High Side Divider Resistor Value in Ohms
  This value is assumed to be from a particular precision
  series as defined in the algorithm below.
  <DOC>
  high: Double with:
    ensure => ensure-positive!
  doc: \<DOC>
  Low Side Divider Resistor Value in Ohms
  This value is assumed to be from a particular precision
  series as defined in the algorithm below.
  <DOC>
  low: Double with:
    ensure => ensure-positive!
  doc: \<DOC>
  Loss Metric Used for Sorting which `Ratio` values to use in ultimate solution.
  <DOC>
  loss: Double with:
    ensure => ensure-non-negative!
with :
  printer

doc: \<DOC>
Solve the Voltage Divider Constraint Problem

This function attempts to use a search-based solver for satisfying the
voltage divider constraints problem. The problem being solved is
defined in the `VoltageDividerConstraints` type. This function
manages making queries to the parts database and filter the resulting
components to pick the best solution.

This solver has multiple filter steps to help reduce the scope of the
search that must be performed:

1.  Pre-filter on the precision series that can satisfy the requirements.
2.  Filter for components with at least {@link min-sources} number of manufacturers.
3.  Expanded check of the result using the TCR tolerances for the resistor.

@param cxt Constraints that define the voltage divider problem to be solved.
@return Solution for the resistors of the divider, specified by the component.
These components can be instantiated in a circuit - see {@link voltage-divider}.
@throws NoSolutionFoundError If no voltage divider can be sourced that meets the
requirements proposed.
<DOC>
public defn solve (cxt:VoltageDividerConstraints) -> VoltageDividerSolution :

  ; This sets the range of values that we consider. Currently,
  ; We use the maximum precision value to set our
  ;  search distance.
  val search-prec = search-range(cxt)

  val goals = compute-initial-guess(cxt)

  for g in goals do:
    if g < 0.0:
      throw $ IncompatibleVinVoutError(v-in(cxt), v-out(cxt))

  val [goal-r-hi, goal-r-lo] = goals

  ; Screen the input voltage requirement with perfect resistors
  ;  This will tell us if the voltage divider is not possible to
  ;  create before expending any other time.
  val vin-screen = compute-objective(cxt, goal-r-hi +/- 0.0, goal-r-lo +/- 0.0)
  if not is-compliant?(cxt, vin-screen):
    throw $ VinRangeTooLargeError(goals, vin-screen)

  ; Run an initial filter on precision series to remove any
  ;  precision values that will obviously not work.

  ; NOTE - `prec-series` is expected to be sorted in
  ;  descending order

  val pre-screen = to-tuple $ for std-prec in prec-series(cxt) seq :
    val vo = compute-objective(cxt,
        goal-r-hi +/- std-prec
        goal-r-lo +/- std-prec
      )
    [is-compliant?(cxt, vo), std-prec, vo]

  val first-valid-series = for elem in pre-screen index-when :
    val [compliant?, prec, vo] = elem
    compliant?

  val series = match(first-valid-series:Int):
    prec-series(cxt)[first-valid-series to false]
  else:
    throw $ NoPrecisionSatisfiesConstraintsError(
      goals,
      pre-screen
      )

  ; println("Valid Precision Series: %_" % [series])
  val sol? = for std-prec in series first:
    println("-> Precision %_" % [std-prec])
    solve-over-series(cxt, std-prec, search-prec)

  match(sol?):
    (sol:One<VoltageDividerSolution>): value(sol)
    (sol):
      throw $ NoSolutionFoundError("Failed to Source Resistors to Satisfy Voltage Divider Constraints")


doc: \<DOC>
Solve for the Voltage Divider over a particular Precision Series
@param cxt Voltage Divider Constraints
@param precision Series precision for which we will search
@param search-prec Range over which we will accept resistors. This
sets the +/- percentage range over which we will search for resistors
that are similar to the goal resistor values.
<DOC>
public defn solve-over-series (
  cxt:VoltageDividerConstraints,
  precision: Percentage,
  search-prec: Percentage) -> Maybe<VoltageDividerSolution> :

  val [goal-r-hi, goal-r-lo] = compute-initial-guess(cxt)

  ; Find best resistors matching output requirement - this
  ;  function makes a query
  val hi-res = query-resistance-by-values(cxt, goal-r-hi, precision, search-prec)
  val lo-res = query-resistance-by-values(cxt, goal-r-lo, precision, search-prec)

  ; println("Num Hi: %_  Lo: %_" % [length(hi-res), length(lo-res)])

  for ratio in sort-pairs-by-best-fit(cxt, precision, hi-res, lo-res) first :
    filter-query-results(cxt, ratio, precision)


doc: \<DOC>
Query for the resistor objects and filter-based on physical characteristics
@param cxt The voltage divider's constraints and search parameters
@param ratio Explicit High and Low side resistance values from the current precision series to evaluate.
@param precision Precision series as a percentage value.
<DOC>
defn filter-query-results (
  cxt:VoltageDividerConstraints,
  ratio:Ratio,
  precision:Percentage
  ) -> Maybe<VoltageDividerSolution> :
  println("    - Querying resistors for R-h=%_Ω R-l=%_Ω" % [high(ratio), low(ratio)])
  val r-his = query-resistors(cxt, high(ratio), precision)
  val r-los = query-resistors(cxt, low(ratio), precision)

  val min-srcs = min-sources(cxt)

  label<Maybe<VoltageDividerSolution>> return:

    if length(r-his) < min-srcs or length(r-los) < min-srcs :
      println("      Ignoring: there must be at least %_ resistors of each type" % [min-srcs])
      return(None())

    val r-hi-cmp = r-his[0]
    val r-lo-cmp = r-los[0]
    val vo-set = study-solution(cxt, r-hi-cmp, r-lo-cmp, temp-range(cxt))
    val vo-valids = to-tuple $ for vo in vo-set seq:
      is-compliant?(cxt, vo)

    val is-valid? = all?({_}, vo-valids)

    if not is-valid? :
      println("      Ignoring: not a solution when taking into account TCRs.")
      defn fmt (ok:True|False, vo:Toleranced):
        match(ok:True):
          "OK"
        else:
          "FAIL (%_ V)" % [vo]

      println("        min-temp: %_"% [fmt(vo-valids[0], vo-set[0])])
      println("        max-temp: %_" % [fmt(vo-valids[1], vo-set[1])])
      return(None())

    println("      Solved: mpn1=%_, mpn2=%_, v-out=(%,V), current=%_A"
            % [mpn(r-hi-cmp), mpn(r-lo-cmp), vo-set, typ-value(vo-set[0]) / low(ratio)])
    ; TODO - compute the worst case v-out here and use that instead of
    ;  just the first (min temperature) one
    val worst-case-vo = vo-set[0]
    One $ VoltageDividerSolution(r-hi-cmp, r-lo-cmp, worst-case-vo)


doc: \<DOC>
Find the best fit resistance pairs from this series.

@param v-in Input Voltage Range as specified to the solver
@param v-out Desired output voltage range as specified to the solver
@param precision E-Series Precision for these families of resistors
@param hi-res Set of nominal resistance values in ohms for components in this series
@param lo-res Set of nominal resistance values in ohms for components in this series
<DOC>
defn sort-pairs-by-best-fit (
  cxt:VoltageDividerConstraints,
  precision: Percentage,
  hi-res: Tuple<Double>,
  lo-res: Tuple<Double>) -> Tuple<Ratio> :
  qsort{loss, _} $
    for rh in hi-res seq-cat :
      for rl in lo-res seq? :
        val loss? = compute-loss(cxt, rh, rl, precision)
        match(loss?):
          (given:One<Double>): One $ Ratio(rh, rl, value(given))
          (_:None): None()

doc: \<DOC>
Query for Resistance Values within the specified precision range

This is a limited query that only returns distinct resistance values
in the range we are inspecting.

@param cxt Voltage Divider Constraints and Parameters. This provides the
base query settings.
@param goal-r Goal resistance value in ohms
@param r-prec Target Precision family - ie (1 %) or (5 %), etc.
@param min-prec Precision family from which to create a range so we don't
query for just a single value. This is primarily for pragmatic search efficiency

@return Set of resistance values for the components that meet the defined specs.
<DOC>
defn query-resistance-by-values (cxt:VoltageDividerConstraints, goal-r:Double, r-prec:Percentage, min-prec:Percentage) -> Tuple<Double> :
  val R = goal-r +/- min-prec
  ; println("query-by-value: r=%_ prec=%_" % [R, r-prec])
  val j-objs = search-resistors(
    base-query(cxt)
    resistance = R,
    precision = r-prec
    exist! = ExistKeys(tcr_pos = true, tcr_neg = true),
    distinct! = DistinctKey(resistance = true)
  )
  to-tuple $ for j-obj in j-objs seq:
    j-obj as Double

doc: \<DOC>
Query for resistors matching a particular target resistance and precision.
@param cxt Voltage Divider Constraints and Parameters. This provides the
base query settings.
@param target Target Resistance Value for constructing the query.
@param prec Precision series for the resistors that we wish to query for.
@return Set of resistors required by the query - limited to `query-limit(cxt)`. This
returns the full data listing for each resistors so that we can do more analysis.
<DOC>
defn query-resistors (cxt:VoltageDividerConstraints, target: Double, prec:Percentage) -> Tuple<Resistor> :
  val j-objs = search-resistors(
    base-query(cxt)
    resistance = target
    precision = prec
    exist! = ExistKeys(tcr_pos = true, tcr_neg = true),
    limit = query-limit(cxt)
  )
  to-tuple $ for j-obj in j-objs seq:
    to-component(j-obj) as Resistor

doc: \<DOC>
Compute the TCR deviations for the temperature extrema
@param r Resistor component object
@param temp Temperature range for evaluating the TCR.
<DOC>
defn compute-tcrs (r:Resistor, temp:Toleranced) -> Tuple<Toleranced|False> :
  to-tuple $ for func in [min-value, max-value] seq:
    compute-tcr-deviation(r, func(temp))

doc: \<DOC>
Compute the voltage divider expected output over a temperature range.
@param cxt Voltage divider constraints

@param r-hi High side divider resistor from query results
@param r-lo Low side divider resistor from query results
@param temp-range Temperature range extrema that we will compute.
@return Tuple of [MinTemp-Vout, MaxTemp-Vout]. These are the extrema points
of the voltage divider output based on `temp-range`
<DOC>
defn study-solution (cxt:VoltageDividerConstraints, r-hi: Resistor, r-lo: Resistor, temp-range:Toleranced) -> Tuple<Toleranced>:
  val lo-drs = compute-tcrs(r-lo, temp-range)
  ; println("Lo-DRS: %_" % [lo-drs])
  val hi-drs = compute-tcrs(r-hi, temp-range)

  val r-lo-val = get-resistance(r-lo)
  val r-hi-val = get-resistance(r-hi)

  to-tuple $ for (lo-dr? in lo-drs, hi-dr? in hi-drs) seq:
    match(lo-dr?, hi-dr?):
      (lo-dr:Toleranced, hi-dr:Toleranced):
        compute-objective(cxt,
            r-hi-val,
            r-lo-val,
            hi-dr,
            lo-dr
          )
      (lo-dr, hi-dr):
        throw $ ValueError("No TCR Data")
